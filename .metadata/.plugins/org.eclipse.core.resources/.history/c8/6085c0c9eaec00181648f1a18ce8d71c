import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class Culminating {
	
	public static void main(String[] args) {
		int runs = 100;
		
		int houseWins = 0;
		int p1Wins = 0;
		int p2Wins = 0;
		
		boolean p1Advantage = false;
		
		Random randGen = new Random();
		for(int i = 0; i < runs; i++) {
			if(coinFlipAdvantage(randGen.nextBoolean())) {
				p1Advantage = true;
			}
			
			
		}
	}
	
	public static boolean coinFlipAdvantage(boolean heads) {
		if(heads) {
			return true;
		} else {
			return false;
		}
	}
	
	public static void spinner(int rand) {
		
	}
	
	public static 
	
	
	//Util functions
	public static boolean isBetweenInclusive(int i, int bL, int bH) { return (bL<=i) && (i<=bH); }
	public static boolean isBetweenInclusiveD(double i, double bL, double bH) {	return (bL<=i) && (i<=bH); }
}


class CardDeck {
	int cards[] = new int[52];
	
	public CardDeck() {
		for(int i = 0; i < 52; i++) {
			cards[i] = i;
		}
		shuffle();
	}
	
	public void shuffle() {
		Random rnd = ThreadLocalRandom.current();
	    for (int i = cards.length - 1; i > 0; i--)
	    {
	      int index = rnd.nextInt(i + 1);
	      int a = cards[index];
	      cards[index] = cards[i];
	      cards[i] = a;
	    }
	}
	
	public int draw() {
		int return 
		return 0;
	}
}