import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class Culminating {
	
	public static final int TIME_ELAPSED = 0;
	public static final int HOUSE_WINS = 1;
	public static final int PLAYER_1_WINS = 2;
	public static final int PLAYER_2_WINS = 3;
	
	public static void main(String[] args) {
		long runs = 10;
		long simData[] = runSim(runs);
		double timePerRun = (double)simData[TIME_ELAPSED]/(double)runs;
		
		/*System.out.print("Simulation took " + simData[TIME_ELAPSED] + " MS to do " + runs + " runs, ");
		System.out.print("with an average time of " + timePerRun + " MS per run.\n");
		
		System.out.println("House Wins: " + simData[HOUSE_WINS] + ", % = " + 100.0*(double)simData[HOUSE_WINS]/runs);
		System.out.println("Player Wins Total: " + (simData[PLAYER_1_WINS]+simData[PLAYER_2_WINS]) + ", % = " + 100.0*(double)(simData[PLAYER_1_WINS]+simData[PLAYER_2_WINS])/runs);
		System.out.println("Player 1 Wins: " + simData[PLAYER_1_WINS] + ", % = " + 100.0*(double)simData[PLAYER_1_WINS]/runs);
		System.out.println("Player 2 Wins: " + simData[PLAYER_2_WINS] + ", % = " + 100.0*(double)simData[PLAYER_2_WINS]/runs);
	*/}
	
	public static long[] runSim(long runs) {
		
		DataCollector data = new DataCollector((int) runs);
		
		long startTimeMS = System.currentTimeMillis();
		
		int houseWins = 0;
		int p1Wins = 0;
		int p2Wins = 0;
		
		CardDeck deck = new CardDeck();
		
		Random randGen = new Random();
		
		gameloop:
		for(long r = 0; r < runs; r++) {
			
			int spinnerResult = -1;
			int failsBeforeSuccess = -1;
			boolean hWin = false;
			
			//Coin flip
			boolean p1Advantage = randGen.nextBoolean();
			
			//Spinner
			int desiredCards[] = null;
			int spinnerVal = randGen.nextInt(36);
			if(spinnerVal < 7) {
				spinnerResult = spinnerVal-1;
				//Black, red, club, spades, diamond, heart, or fail
				switch(spinnerVal) {
				case 0: 
					//Fail
					houseWins++;
					continue gameloop;
				case 1:
					//Black
					desiredCards = getDesiredCardRange(0,52/2);
					break;
				case 2:
					//Red
					desiredCards = getDesiredCardRange(52/2, 52);
					break;
				case 3:
					//Club
					desiredCards = getDesiredCardRange(0,52/4);
					break;
				case 4:
					//Spade
					desiredCards = getDesiredCardRange(52/4, 2*52/4);
					break;
				case 5:
					//Diamond
					desiredCards = getDesiredCardRange(2*52/4, 3*52/4);
					break;
				case 6:
					//Heart
					desiredCards = getDesiredCardRange(3*52/4,52);
					break;
				}
			} else if(spinnerVal < 20) {
				//Rank
				int startCard = randGen.nextInt(52-4);
				desiredCards = getDesiredCardRange(startCard, startCard+4);
				spinnerResult = 6;
			} else {
				//Rank and colour
				int startCard = randGen.nextInt(52-2);
				desiredCards = getDesiredCardRange(startCard, startCard+2);
				spinnerResult = 7;
			}
			
			//Card Drawing
			deck.resetDeck();
			deck.shuffle(5);
			int maxDraws = 26;
			for(int i = 0; i < maxDraws; i++) {
				if(isInArray(desiredCards, deck.draw())) {
					if(i%2 == 0) {
						if(p1Advantage) { p1Wins++; } else { p2Wins++; }
					} else {
						if(p1Advantage) { p2Wins++; } else { p1Wins++; }
					}
					failsBeforeSuccess = i;
					hWin = false;
					data.addRun(new RunData(spinnerResult, failsBeforeSuccess, hWin));
					
					System.out.println("% Completed: " + 100.0*((double)r/(double)runs));
					
					continue gameloop;
				}
			}
			
			hWin = true;
			houseWins++;
			
			data.addRun(new RunData(spinnerResult, failsBeforeSuccess, hWin));
			
			System.out.println("% Completed: " + 100.0*((double)r/(double)runs));
			
		}
		
		long timeElapsedMS = System.currentTimeMillis() - startTimeMS;
		
		long returnVal[] = {timeElapsedMS, (long)houseWins, (long)p1Wins, (long)p2Wins};
		return returnVal;
	}
	
	//Util functions
	public static boolean isBetweenInclusive(int i, int bL, int bH) { return (bL<=i) && (i<=bH); }
	public static boolean isBetweenInclusiveD(double i, double bL, double bH) {	return (bL<=i) && (i<=bH); }
	public static int[] getDesiredCardRange(int startInclusive, int endExclusive) {
		int size = endExclusive - startInclusive;
		int cardReturn[] = new int[size];
		for(int i = 0; i < size; i++) {
			cardReturn[i] = i+startInclusive;
		}
		return cardReturn;
	}
	public static boolean isInArray(int arr[], int obj) {
		for(int i = 0; i < arr.length; i++) {
			if(obj == arr[i]) { return true; }
		}
		return false;
	}
}


class CardDeck {
	ArrayList<Integer> cards = new ArrayList<Integer>();
	
	public void resetDeck() {
		cards.clear();
		for(int i = 0; i < 52; i++) {
			cards.add(i);
		}
	}
	
	public void shuffle(int shuffles) {
		for(int s = 0; s < shuffles; s++) {
			Random rnd = ThreadLocalRandom.current();
		    for (int i = cards.size() - 1; i > 0; i--)
		    {
		      int index = rnd.nextInt(i + 1);
		      int a = cards.get(index);
		      cards.set(index, cards.get(i));
		      cards.set(i, a);
		    }
		}
	}
	
	public int draw() {
		return cards.remove(0);
	}
	
	public void printDeck() {
		if(cards.size() > 0) {
			System.out.print(cards.get(0));
			for(int i = 1; i < cards.size(); i++) { System.out.print(", " + cards.get(i)); } System.out.print("\n");
		}
	}
}