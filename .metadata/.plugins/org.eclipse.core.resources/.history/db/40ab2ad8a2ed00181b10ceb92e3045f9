import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

public class Culminating {
	
	public static void main(String[] args) {
		int runs = 0;
		
		int houseWins = 0;
		int p1Wins = 0;
		int p2Wins = 0;
		
		printIntArray(getDesiredCardRange(0,52/2));
		
		Random randGen = new Random();
		for(int r = 0; r < runs; r++) {
			
			//Coin flip
			boolean p1Advantage = randGen.nextBoolean();
			
			int desiredCards[];
			
			//Spinner
			int spinnerVal = randGen.nextInt(36);
			if(spinnerVal < 7) {
				//Black, red, club, spades, diamond, heart, or fail
				switch(spinnerVal) {
				case 0: /*Fail*/ continue;
				case 1:
					//Black
					desiredCards = getDesiredCardRange(0,52/2);
					break;
				case 2:
					//Red
					desiredCards = getDesiredCardRange(52/2, 52);
					break;
				case 3:
					//Club
					desiredCards = getDesiredCardRange(0,52/4);
					break;
				case 4:
					//Spade
					desiredCards = getDesiredCardRange(52/4, 2*52/4);
					break;
				case 5:
					//Diamond
					desiredCards = getDesiredCardRange(2*52/4, 3*52/4);
					break;
				case 6:
					//Heart
					desiredCards = getDesiredCardRange(3*52/4,52);
					break;
				}
			} else if(spinnerVal < 20) {
				//Rank
				desiredCards = new int[4];
			} else {
				//Rank and colour
			}
		}
	}
	
	//Util functions
	public static boolean isBetweenInclusive(int i, int bL, int bH) { return (bL<=i) && (i<=bH); }
	public static boolean isBetweenInclusiveD(double i, double bL, double bH) {	return (bL<=i) && (i<=bH); }
	public static int[] getDesiredCardRange(int startInclusive, int endExclusive) {
		int size = endExclusive - startInclusive;
		int cardReturn[] = new int[size];
		for(int i = 0; i < size; i++) {
			cardReturn[i] = i+startInclusive;
		}
		return cardReturn;
	}
	
	//Testing functions
	public static void printIntArray(int[] arr) {
		if(arr.length > 0) {
			System.out.print(arr[0] + ", ");
			for(int i = 1; i < arr.length; i++) { System.out.print(arr[i] + ", "); } System.out.print("\n");
		}
	}
}


class CardDeck {
	ArrayList<Integer> cards = new ArrayList<Integer>();
	
	public CardDeck() {
		for(int i = 0; i < 52; i++) {
			cards.add(i);
		}
		shuffle();
	}
	
	public void shuffle() {
		Random rnd = ThreadLocalRandom.current();
	    for (int i = cards.size() - 1; i > 0; i--)
	    {
	      int index = rnd.nextInt(i + 1);
	      int a = cards.get(index);
	      cards.set(index, cards.get(i));
	      cards.set(i, a);
	    }
	}
	
	public int draw() {
		return cards.remove(0);
	}
}